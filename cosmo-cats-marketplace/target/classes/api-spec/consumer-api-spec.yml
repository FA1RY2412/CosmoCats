openapi: 3.0.3
info:
  title: Cosmo Cats Intergalactic Marketplace - Product API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /api/products:
    get:
      summary: Get all products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            examples:
              valid:
                value:
                  name: "Galaxy Yarn"
                  description: "Anti-gravity yarn ball"
                  price: 19.99
                  category: "toys"
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ProblemBadRequest'
  /api/products/{id}:
    get:
      summary: Get product by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
        '404': { description: Not Found }
    put:
      summary: Update product by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
        '400': { $ref: '#/components/responses/ProblemBadRequest' }
        '404': { description: Not Found }
    delete:
      summary: Delete product by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }

components:
  schemas:
    Product:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, example: "Galaxy Yarn" }
        description: { type: string }
        price: { type: number, format: double, example: 19.99 }
        category: { type: string, example: "toys" }
      required: [id, name, price, category]
    ProductRequest:
      type: object
      properties:
        name: { type: string, minLength: 3, maxLength: 50 }
        description: { type: string, maxLength: 255 }
        price: { type: number, format: double, minimum: 0.01 }
        category: { type: string, minLength: 3, maxLength: 30 }
      required: [name, price, category]
    Problem:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        status: { type: integer, example: 400 }
        error: { type: string, example: "Bad Request" }
        message: { type: string, example: "Validation failed for object 'ProductDto': Field 'price' must be greater than 0." }
        path: { type: string, example: "/api/products" }
  responses:
    ProblemBadRequest:
      description: Validation problem
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
